https://www.codechef.com/problems/RNDPAIR

#Good Probelems

Note : First Solution is a basic solution. However we can make it better. We know that combinations between 'n' set if numbers is ((n*(n-1))/2), so we can leverage it and just count the number of combinations of maximum elements. If the count of maximum element is just one, we can just use the count of second maximum element as each of the second maximum element of the array will add to the maximum element of the array and give a maximum sum.

# cook your dish here
for tc in range(int(input())):
    
    n = int(input())
    
    li = list(map(int,input().split()))
    
    maximum = []
    
    for i in range(len(li)):
        
        for j in range(i+1,n):
            
            maximum.append(li[i]+li[j])
            
            
    
    count = maximum.count(max(maximum))
    
    prob = count / ((n*(n-1))//2)
    
    print('%.8f'%prob)
    
Second Solution:


# cook your dish here
for i in range(int(input())):
    n=int(input())
    p=input()
    p=list(map(int,p.split()))
    p.sort()
    c=p.count(p[-1])
    if c==n:
        print('%.8f'%1)
    else:
        if c==1:
            d=p.count(p[-c-1])
            e=d/((n*(n-1))/2)
            print('%.8f'%e)
        else:
            c=(c*(c-1))/2
            e=c/((n*(n-1))/2)
            print('%.8f'%e)
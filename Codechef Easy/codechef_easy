Paying up Problem Code: MARCHA1

Note : Easy Solution takes 33 Seconds and the fastet one takes 0.01 seconds. Thats using recursion so we will show you that as well

t = int(input())
for iii in range(t):
    n,m = map(int,input().split())
    l=[]
    for i in range(n):
        l.append(int(input()))
    l2=[]
    for i in range(2**n):
        num = bin(i).lstrip("0b")
        
        if(len(num)<n):
            
            num = (n-len(num))*"0"+num
            
        
        l2.append(num)
    c=0
    for i in range(2**n):
        sum1=0
        for j in range(n):
            if(l2[i][j]=="1"):
                sum1+=l[j]
        if(sum1==m):
            
            c=1
            
        
    if(c==0):
        print("No")
    else:
        print("Yes")
        
#######Recursion Method######

def subsetsum(x,sum_,n):
	if sum_==0: return True

	if n==0: return False

	if x[n-1] > sum_:
		return subsetsum(x,sum_,n-1)
	return subsetsum(x,sum_,n-1) or subsetsum(x,sum_-x[n-1],n-1)

t = int(input())

for _ in range(t):
	n,sum_  =map (int,input().split())

	x = []
	for i in range(n):
		x.append(int(input()))

	print('Yes') if subsetsum(x, sum_,n) else print('No')



